[gd_resource type="VisualShader" load_steps=4 format=2]

[sub_resource type="VisualShaderNodeColorConstant" id=1]
constant = Color( 0.8125, 0.0507812, 0.0507812, 1 )

[sub_resource type="VisualShaderNodeFresnel" id=2]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeVectorFunc" id=3]
function = 25

[resource]
code = "shader_type canvas_item;



void vertex() {
// Output:0

}

void fragment() {
// Color:2
	vec3 n_out2p0;
	float n_out2p1;
	n_out2p0 = vec3(0.812500,0.050781,0.050781);
	n_out2p1 = 1.000000;

// VectorFunc:4
	vec3 n_in4p0 = vec3(0.00000,0.00000,0.00000);
	vec3 n_out4p0;
	n_out4p0=round(n_in4p0);

// Fresnel:3
	bool n_in3p2 = false;
	float n_in3p3 = 1.00000;
	float n_out3p0;
	n_out3p0 = n_in3p2 ? (pow(clamp(dot(NORMAL, n_out4p0), 0.0, 1.0), n_in3p3)) : (pow(1.0 - clamp(dot(NORMAL, n_out4p0), 0.0, 1.0), n_in3p3));
// Output:0
	COLOR.rgb = n_out2p0;
	COLOR.a = n_out3p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -42, 47.5 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 480, 140 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( 280, 120 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( 80, 200 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -80, 100 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 0, 3, 0, 0, 1, 4, 0, 3, 1 )
